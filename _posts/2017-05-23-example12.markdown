---
analytics-location: '/&lt;user-name&gt;/&lt;repo-name&gt;/issues/show'
browser-errors-url: 'https://api.github.com/\_private/browser/errors'
browser-stats-url: 'https://api.github.com/\_private/browser/stats'
description: |
    Blog -
    冴羽写博客的地方，预计写四个系列：JavaScript深入系列、JavaScript专题系列、ES6系列、React系列。
dimension1: Logged Out
expected-hostname: 'github.com'
go-import: 'github.com/mqyqingfeng/Blog git https://github.com/mqyqingfeng/Blog.git'
google-analytics: 'UA-3769691-2'
google-site-verification:
- KT5gs8h0wvaagLKAVWq8bbeNwnZZK1r1XQysX3xurLU
- 'ZzhVyEFwb7w3e0-uOTltm8Jsck2F5StVihD0exw2fsA'
hostname: 'github.com'
html-safe-nonce: 3b8f6c4025c3668487eb64472b77f1918ab173da
js-proxy-site-detection-payload: MDkwNTdmY2JiNzQzZTc2YWI1MmE4ZWRlOWI3YTg4OWRhOGE3Mzc1OTgyYzRlOTY1NDMzMzRmYjM5ODFhZmFlOHx7InJlbW90ZV9hZGRyZXNzIjoiMTQwLjIwNy4xNjEuMjI3IiwicmVxdWVzdF9pZCI6IjJCQjA6MkU2OUY6MTY3RDI5OToyM0FBNDk4OjU5MjNBOTU5IiwidGltZXN0YW1wIjoxNDk1NTA5MzM4LCJob3N0IjoiZ2l0aHViLmNvbSJ9
octolytics-app-id: github
octolytics-dimension-repository_id: 84811466
octolytics-dimension-repository_is_fork: false
octolytics-dimension-repository_network_root_id: 84811466
octolytics-dimension-repository_network_root_nwo: 'mqyqingfeng/Blog'
octolytics-dimension-repository_nwo: 'mqyqingfeng/Blog'
octolytics-dimension-repository_public: true
octolytics-dimension-request_id: '2BB0:2E69F:167D299:23AA498:5923A959'
octolytics-dimension-user_id: 11458263
octolytics-dimension-user_login: mqyqingfeng
octolytics-event-url: 'https://collector.githubapp.com/github-external/browser\_event'
octolytics-host: 'collector.githubapp.com'
pjax-timeout: 1000
request-id: '2BB0:2E69F:167D299:23AA498:5923A959'
theme-color: '\#1e2327'
title: 'JavaScript深入之闭包 · Issue \#9 · mqyqingfeng/Blog · GitHub'
viewport: 'width=device-width'
---

<div class="position-relative js-header-wrapper">

[Skip to content](#start-of-content){.accessibility-aid
.js-skip-to-content}
<div id="js-pjax-loader-bar" class="pjax-loader-bar">

<div class="progress">

</div>

</div>

<div class="container-responsive">

<div class="site-header-menu">

[Features](/features){.js-selected-navigation-item .nav-item}
[Business](/business){.js-selected-navigation-item .nav-item}
[Explore](/explore){.js-selected-navigation-item .nav-item}
[Marketplace](/marketplace){.js-selected-navigation-item .nav-item}
[Pricing](/pricing){.js-selected-navigation-item .nav-item}
<div class="site-header-actions">

<div
class="header-search scoped-search site-scoped-search js-site-search"
role="search">

<div style="margin:0;padding:0;display:inline">

</div>

[This repository](/mqyqingfeng/Blog/issues/9){.header-search-scope
.no-underline}

</div>

[Sign
in](/login?return_to=%2Fmqyqingfeng%2FBlog%2Fissues%2F9){.text-bold
.site-header-link} [or]{.text-gray} [Sign
up](/join?source=header-repo){.text-bold .site-header-link}

</div>

</div>

</div>

</div>

<div id="start-of-content" class="accessibility-aid">

</div>

<div id="js-flash-container">

</div>

<div role="main">

<div itemscope="" itemtype="http://schema.org/SoftwareSourceCode">

<div id="js-repo-pjax-container" data-pjax-container="">

<div
class="pagehead repohead instapaper_ignore readability-menu experiment-repo-nav">

<div class="container repohead-details-container">

-   Watch [48](/mqyqingfeng/Blog/watchers){.social-count}
-   Star [249](/mqyqingfeng/Blog/stargazers){.social-count
    .js-social-count}
-   Fork [50](/mqyqingfeng/Blog/network){.social-count}

[[mqyqingfeng](/mqyqingfeng){.url .fn}]{.author itemprop="author"}[/]{.path-divider}**[Blog](/mqyqingfeng/Blog)** {#mqyqingfengblog .public}
=================================================================================================================

</div>

<div class="container">

[Code]{itemprop="name"}
[Issues]{itemprop="name"} [15]{.Counter}
[Pull requests]{itemprop="name"} [0]{.Counter}
Projects [0]{.Counter}
<div class="reponav-dropdown js-menu-container">

Insights
<div class="dropdown-menu-content js-menu-content">

<div class="dropdown-menu dropdown-menu-sw">

Pulse
Graphs

</div>

</div>

</div>

</div>

</div>

<div class="container new-discussion-timeline experiment-repo-nav">

<div class="repository-content">

<div class="issues-listing" data-pjax="">

<div id="show_issue" class="js-issues-results">

<div id="partial-discussion-header"
class="gh-header js-details-container Details js-socket-channel js-updatable-content issue"
data-channel="issue:224652149"
data-url="/mqyqingfeng/Blog/issues/9/show_partial?partial=issues%2Ftitle">

<div class="gh-header-show">

<div class="gh-header-actions">

[New issue](/mqyqingfeng/Blog/issues/new){.btn .btn-sm .btn-primary
.float-right}

</div>

[ JavaScript深入之闭包 ]{.js-issue-title} [\#9]{.gh-header-number} {#javascript深入之闭包-9 .gh-header-title}
==================================================================

</div>

<div class="TableObject gh-header-meta">

<div class="TableObject-item">

<div class="State State--green">

Open

</div>

</div>

<div class="TableObject-item TableObject-item--primary">

[mqyqingfeng](/mqyqingfeng){.author} opened this [Issue]{.noun} Apr 27,
2017 · 6 comments

</div>

</div>

</div>

Comments {#comments .sr-only}
--------

<div id="discussion_bucket" class="clearfix">

<div class="discussion-sidebar">

<div id="partial-discussion-sidebar"
class="js-socket-channel js-updatable-content"
data-channel="issue:224652149"
data-url="/mqyqingfeng/Blog/issues/9/show_partial?partial=issues%2Fsidebar">

<div
class="discussion-sidebar-item sidebar-assignee js-discussion-sidebar-item">

<div style="margin:0;padding:0;display:inline">

</div>

<div class="discussion-sidebar-heading text-bold">

Assignees

</div>

[ No one assigned ]{.css-truncate}

</div>

<div
class="discussion-sidebar-item sidebar-labels js-discussion-sidebar-item">

<div style="margin:0;padding:0;display:inline">

</div>

<div class="discussion-sidebar-heading text-bold">

Labels

</div>

<div class="labels css-truncate">

[深入系列](/mqyqingfeng/Blog/labels/%E6%B7%B1%E5%85%A5%E7%B3%BB%E5%88%97 "深入系列"){.label
.css-truncate-target .linked-labelstyle-0e98a2}

</div>

</div>

<div class="discussion-sidebar-item js-discussion-sidebar-item">

<div style="margin:0;padding:0;display:inline">

</div>

<div class="discussion-sidebar-heading text-bold">

Projects

</div>

[ None yet ]{.css-truncate}

</div>

<div
class="discussion-sidebar-item sidebar-milestone js-discussion-sidebar-item">

<div style="margin:0;padding:0;display:inline">

</div>

<div class="discussion-sidebar-heading text-bold">

Milestone

</div>

No milestone

</div>

<div id="partial-users-participants" class="discussion-sidebar-item">

<div class="participation">

<div class="discussion-sidebar-heading text-bold">

5 participants

</div>

<div class="participation-avatars">

[![@mqyqingfeng](https://avatars1.githubusercontent.com/u/11458263?v=3&s=52){.avatar
width="26" height="26"}](/mqyqingfeng){.participant-avatar .tooltipped
.tooltipped-n}
[![@jawil](https://avatars1.githubusercontent.com/u/16515708?v=3&s=52){.avatar
width="26" height="26"}](/jawil){.participant-avatar .tooltipped
.tooltipped-n}
[![@zhouyu275596101](https://avatars3.githubusercontent.com/u/26214672?v=3&s=52){.avatar
width="26" height="26"}](/zhouyu275596101){.participant-avatar
.tooltipped .tooltipped-n}
[![@spicychocolate](https://avatars2.githubusercontent.com/u/22002601?v=3&s=52){.avatar
width="26" height="26"}](/spicychocolate){.participant-avatar
.tooltipped .tooltipped-n}
[![@fi3ework](https://avatars1.githubusercontent.com/u/12322740?v=3&s=52){.avatar
width="26" height="26"}](/fi3ework){.participant-avatar .tooltipped
.tooltipped-n}

</div>

</div>

</div>

</div>

</div>

<div class="discussion-timeline js-quote-selection-container">

<div class="js-discussion js-socket-channel"
data-channel="marked-as-read:issue:224652149">

<div class="timeline-comment-wrapper js-comment-container">

<div class="avatar-parent-child timeline-comment-avatar">

[![@mqyqingfeng](https://avatars2.githubusercontent.com/u/11458263?v=3&s=88){.avatar
.rounded-1 width="44" height="44"}](/mqyqingfeng)

</div>

<div id="issue-224652149"
class="comment previewable-edit timeline-comment js-comment js-task-list-container"
data-body-version="5cea3ed07020970a4b13220cfbc6a097">

<div class="timeline-comment-header">

<div class="timeline-comment-actions">

</div>

[ Owner ]{.timeline-comment-label .text-bold .tooltipped
.tooltipped-multiline .tooltipped-s
aria-label="This user is the owner of the Blog repository."}
### **[mqyqingfeng](/mqyqingfeng){.author}** commented [Apr 27, 2017](#issue-224652149){.timestamp} • [ edited ]{.timestamp .timestamp-edited .tooltipped .tooltipped-n aria-label="mqyqingfeng edited this issue about 20 hours ago"} {#mqyqingfeng-commented-apr-27-2017-edited .timeline-comment-header-text .f5 .text-normal}

</div>

<div class="edit-comment-hide">

+-----------------------------------------------------------------------+
| 定义                                                                  |
| ----                                                                  |
|                                                                       |
| MDN 对闭包的定义为：                                                  |
|                                                                       |
| > 闭包是指那些能够访问自由变量的函数。                                |
|                                                                       |
| 那什么是自由变量呢？                                                  |
|                                                                       |
| > 自由变量是指在函数中使用的，但既不是函数参数也不是函数的局部变量的变量。 |
|                                                                       |
|                                                                       |
| 由此，我们可以看出闭包共有两部分组成：                                |
|                                                                       |
| > 闭包 = 函数 + 函数能够访问的自由变量                                |
|                                                                       |
| 举个例子：                                                            |
|                                                                       |
| <div class="highlight highlight-source-js">                           |
|                                                                       |
|     var a = 1;                                                        |
|                                                                       |
|     function foo() {                                                  |
|         console.log(a);                                               |
|     }                                                                 |
|                                                                       |
|     foo();                                                            |
|                                                                       |
| </div>                                                                |
|                                                                       |
| foo 函数可以访问变量 a，但是 a 既不是 foo 函数的局部变量，也不是 foo  |
| 函数的参数，所以 a 就是自由变量。                                     |
|                                                                       |
| 那么，函数 foo + foo 函数访问的自由变量 a 不就是构成了一个闭包嘛……    |
|                                                                       |
| 还真是这样的！                                                        |
|                                                                       |
| 所以在《JavaScript权威指南》中就讲到：从技术的角度讲，所有的JavaScript函数都是闭包。 |
|                                                                       |
|                                                                       |
| 咦，这怎么跟我们平时看到的讲到的闭包不一样呢！？                      |
|                                                                       |
| 别着急，这是理论上的闭包，其实还有一个实践角度上的闭包，让我们看看汤姆大叔翻译的关于闭包的文章中的定义： |
|                                                                       |
|                                                                       |
| ECMAScript中，闭包指的是：                                            |
|                                                                       |
| 1.  从理论角度：所有的函数。因为它们都在创建的时候就将上层上下文的数据保存起来了。哪怕是简单的全局变量也是如此，因为函数中访问全局变量 |
| 就相当于是在访问自由变量，这个时候使用最外层的作用域。                |
| 2.  从实践角度：以下函数才算是闭包：                                  |
|     1.  即使创建它的上下文已经销毁，它仍然存在（比如，内部函数从父函数中返回） |
|                                                                       |
|     2.  在代码中引用了自由变量                                        |
|                                                                       |
| 接下来就来讲讲实践上的闭包。                                          |
|                                                                       |
| 分析                                                                  |
| ----                                                                  |
|                                                                       |
| 让我们先写个例子，例子依然是来自《JavaScript权威指南》，稍微做点改动： |
|                                                                       |
|                                                                       |
| <div class="highlight highlight-source-js">                           |
|                                                                       |
|     var scope = "global scope";                                       |
|     function checkscope(){                                            |
|         var scope = "local scope";                                    |
|         function f(){                                                 |
|             return scope;                                             |
|         }                                                             |
|         return f;                                                     |
|     }                                                                 |
|                                                                       |
|     var foo = checkscope();                                           |
|     foo();                                                            |
|                                                                       |
| </div>                                                                |
|                                                                       |
| 首先我们要分析一下这段代码中执行上下文栈和执行上下文的变化情况。      |
|                                                                       |
| 另一个与这段代码相似的例子，在[《JavaScript深入之执行上下文》](https://github.com/mqyqingfeng/ |
| Blog/issues/8)中有着非常详细的分析。如果看不懂以下的执行过程，建议先阅读这篇文章。 |
|                                                                       |
|                                                                       |
| 这里直接给出简要的执行过程：                                          |
|                                                                       |
| 1.  进入全局代码，创建全局执行上下文，全局执行上下文压入执行上下文栈  |
| 2.  全局执行上下文初始化                                              |
| 3.  执行 checkscope 函数，创建 checkscope 函数执行上下文，checkscope  |
|     执行上下文被压入执行上下文栈                                      |
| 4.  checkscope 执行上下文初始化，创建变量对象、作用域链、this等       |
| 5.  checkscope 函数执行完毕，checkscope                               |
|     执行上下文从执行上下文栈中弹出                                    |
| 6.  执行 f 函数，创建 f 函数执行上下文，f                             |
|     执行上下文被压入执行上下文栈                                      |
| 7.  f 执行上下文初始化，创建变量对象、作用域链、this等                |
| 8.  f 函数执行完毕，f 函数上下文从执行上下文栈中弹出                  |
|                                                                       |
| 了解到这个过程，我们应该思考一个问题，那就是：                        |
|                                                                       |
| 当 f 函数执行的时候，checkscope                                       |
| 函数上下文已经被销毁了啊(即从执行上下文栈中被弹出)，怎么还会读取到    |
| checkscope 作用域下的 scope 值呢？                                    |
|                                                                       |
| 以上的代码，要是转换成 PHP，就会报错，因为在 PHP 中，f                |
| 函数只能读取到自己作用域和全局作用域里的值，所以读不到 checkscope     |
| 下的 scope 值。(这段我问的PHP同事……)                                  |
|                                                                       |
| 然而 JavaScript 却是可以的！                                          |
|                                                                       |
| 当我们了解了具体的执行过程后，我们知道 f                              |
| 执行上下文维护了一个作用域链：                                        |
|                                                                       |
| <div class="highlight highlight-source-js">                           |
|                                                                       |
|     fContext = {                                                      |
|         Scope: [AO, checkscopeContext.AO, globalContext.VO],          |
|     }                                                                 |
|                                                                       |
| </div>                                                                |
|                                                                       |
| 对的，就是因为这个作用域链，f 函数依然可以读取到 checkscopeContext.AO |
| 的值，说明当 f 函数引用了 checkscopeContext.AO 中的值的时候，即使     |
| checkscopeContext 被销毁了，但是 JavaScript 依然会让                  |
| checkscopeContext.AO 活在内存中，f 函数依然可以通过 f                 |
| 函数的作用域链找到它，正是因为 JavaScript                             |
| 做到了这一点，从而实现了闭包这个概念。                                |
|                                                                       |
| 所以，让我们再看一遍实践角度上闭包的定义：                            |
|                                                                       |
| 1.  即使创建它的上下文已经销毁，它仍然存在（比如，内部函数从父函数中返回） |
|                                                                       |
| 2.  在代码中引用了自由变量                                            |
|                                                                       |
| 在这里再补充一个《JavaScript权威指南》英文原版对闭包的定义:           |
|                                                                       |
| > This combination of a function object and a scope (a set of         |
| > variable bindings) in which the function’s variables are resolved   |
| > is called a closure in the computer science literature.             |
|                                                                       |
| 闭包在计算机科学中也只是一个普通的概念，大家不要去想得太复杂。        |
|                                                                       |
| 必刷题                                                                |
| ------                                                                |
|                                                                       |
| 接下来，看这道刷题必刷，面试必考的闭包题：                            |
|                                                                       |
| <div class="highlight highlight-source-js">                           |
|                                                                       |
|     var data = [];                                                    |
|                                                                       |
|     for (var i = 0; i < 3; i++) {                                     |
|       data[i] = function () {                                         |
|         console.log(i);                                               |
|       };                                                              |
|     }                                                                 |
|                                                                       |
|     data[0]();                                                        |
|     data[1]();                                                        |
|     data[2]();                                                        |
|                                                                       |
| </div>                                                                |
|                                                                       |
| 答案是都是 3，让我们分析一下原因：                                    |
|                                                                       |
| 当执行到 data\[0\] 函数之前，此时全局上下文的 VO 为：                 |
|                                                                       |
| <div class="highlight highlight-source-js">                           |
|                                                                       |
|     globalContext = {                                                 |
|         VO: {                                                         |
|             data: [...],                                              |
|             i: 3                                                      |
|         }                                                             |
|     }                                                                 |
|                                                                       |
| </div>                                                                |
|                                                                       |
| 当执行 data\[0\] 函数的时候，data\[0\] 函数的作用域链为：             |
|                                                                       |
| <div class="highlight highlight-source-js">                           |
|                                                                       |
|     data[0]Context = {                                                |
|         Scope: [AO, globalContext.VO]                                 |
|     }                                                                 |
|                                                                       |
| </div>                                                                |
|                                                                       |
| data\[0\]Context 的 AO 并没有 i 值，所以会从 globalContext.VO         |
| 中查找，i 为 3，所以打印的结果就是 3。                                |
|                                                                       |
| data\[1\] 和 data\[2\] 是一样的道理。                                 |
|                                                                       |
| 所以让我们改成闭包看看：                                              |
|                                                                       |
| <div class="highlight highlight-source-js">                           |
|                                                                       |
|     var data = [];                                                    |
|                                                                       |
|     for (var i = 0; i < 3; i++) {                                     |
|       data[i] = (function (i) {                                       |
|             return function(){                                        |
|                 console.log(i);                                       |
|             }                                                         |
|       })(i);                                                          |
|     }                                                                 |
|                                                                       |
|     data[0]();                                                        |
|     data[1]();                                                        |
|     data[2]();                                                        |
|                                                                       |
| </div>                                                                |
|                                                                       |
| 当执行到 data\[0\] 函数之前，此时全局上下文的 VO 为：                 |
|                                                                       |
| <div class="highlight highlight-source-js">                           |
|                                                                       |
|     globalContext = {                                                 |
|         VO: {                                                         |
|             data: [...],                                              |
|             i: 3                                                      |
|         }                                                             |
|     }                                                                 |
|                                                                       |
| </div>                                                                |
|                                                                       |
| 跟没改之前一模一样。                                                  |
|                                                                       |
| 当执行 data\[0\] 函数的时候，data\[0\] 函数的作用域链发生了改变：     |
|                                                                       |
| <div class="highlight highlight-source-js">                           |
|                                                                       |
|     data[0]Context = {                                                |
|         Scope: [AO, 匿名函数Context.AO globalContext.VO]              |
|     }                                                                 |
|                                                                       |
| </div>                                                                |
|                                                                       |
| 匿名函数执行上下文的AO为：                                            |
|                                                                       |
| <div class="highlight highlight-source-js">                           |
|                                                                       |
|     匿名函数Context = {                                               |
|         AO: {                                                         |
|             arguments: {                                              |
|                 0: 0,                                                 |
|                 length: 1                                             |
|             },                                                        |
|             i: 0                                                      |
|         }                                                             |
|     }                                                                 |
|                                                                       |
| </div>                                                                |
|                                                                       |
| data\[0\]Context 的 AO 并没有 i 值，所以会沿着作用域链从匿名函数      |
| Context.AO 中查找，这时候就会找 i 为 0，找到了就不会往                |
| globalContext.VO 中查找了，即使 globalContext.VO 也有 i               |
| 的值(值为3)，所以打印的结果就是0。                                    |
|                                                                       |
| data\[1\] 和 data\[2\] 是一样的道理。                                 |
|                                                                       |
| 下一篇文章                                                            |
| ----------                                                            |
|                                                                       |
| [JavaScript深入之参数按值传递](https://github.com/mqyqingfeng/Blog/issues/10) |
|                                                                       |
|                                                                       |
| 相关链接                                                              |
| --------                                                              |
|                                                                       |
| 如果想了解执行上下文的具体变化，不妨循序渐进，阅读这六篇：            |
|                                                                       |
| [《JavaScript深入之词法作用域和动态作用域》](https://github.com/mqyqingfeng/Blog/issu |
| es/3)                                                                 |
|                                                                       |
| [《JavaScript深入之执行上下文栈》](https://github.com/mqyqingfeng/Blog/issues/4) |
|                                                                       |
|                                                                       |
| [《JavaScript深入之变量对象》](https://github.com/mqyqingfeng/Blog/issues/5) |
|                                                                       |
|                                                                       |
| [《JavaScript深入之作用域链》](https://github.com/mqyqingfeng/Blog/issues/6) |
|                                                                       |
|                                                                       |
| [《JavaScript深入之从ECMAScript规范解读this》](https://github.com/mqyqingfeng/B |
| log/issues/7)                                                         |
|                                                                       |
| [《JavaScript深入之执行上下文》](https://github.com/mqyqingfeng/Blog/issues/8) |
|                                                                       |
|                                                                       |
| 深入系列                                                              |
| --------                                                              |
|                                                                       |
| JavaScript深入系列目录地址：<https://github.com/mqyqingfeng/Blog>。   |
|                                                                       |
| JavaScript深入系列预计写十五篇左右，旨在帮大家捋顺JavaScript底层知识，重点讲解如原型、作用域、执行上下文、变量对象、t |
| his、闭包、按值传递、call、apply、bind、new、继承等难点概念。         |
|                                                                       |
| 如果有错误或者不严谨的地方，请务必给予指正，十分感谢。如果喜欢或者有所启发，欢迎star，对作者也是一种鼓励。 |
+-----------------------------------------------------------------------+

<div class="comment-reactions has-reactions js-reactions-container">

<div style="margin:0;padding:0;display:inline">

</div>

<div class="comment-reactions-options">

👍 1

</div>

</div>

</div>

</div>

</div>

<div class="discussion-item discussion-item-labeled">

### [ ]{.discussion-item-icon} ![](https://avatars3.githubusercontent.com/u/11458263?v=3&s=32){.avatar width="16" height="16"} [mqyqingfeng](/mqyqingfeng){.author} added the [[深入系列](/mqyqingfeng/Blog/labels/%E6%B7%B1%E5%85%A5%E7%B3%BB%E5%88%97)]{.label-color style="background-color: #0e98a2;"} label [Apr 27, 2017](#event-1059682422){.timestamp} {#event-1059682422 .discussion-item-header .f5 .text-normal}

</div>

<div class="timeline-comment-wrapper js-comment-container">

<div class="avatar-parent-child timeline-comment-avatar">

[![@jawil](https://avatars2.githubusercontent.com/u/16515708?v=3&s=88){.avatar
.rounded-1 width="44" height="44"}](/jawil)

</div>

<div id="issuecomment-297635540"
class="comment previewable-edit timeline-comment js-comment js-task-list-container"
data-body-version="1b62da9c74d46bb6484063c156e876b2">

<div class="timeline-comment-header">

<div class="timeline-comment-actions">

</div>

### **[jawil](/jawil){.author}** commented [Apr 27, 2017](#issuecomment-297635540){.timestamp} {#jawil-commented-apr-27-2017 .timeline-comment-header-text .f5 .text-normal}

</div>

<div class="edit-comment-hide">

+-----------------------------------------------------------------------+
| 支持下一啊，虽然对闭包已经看了很多了，每次看一遍都会有一番不同的感受，学习就是一个重复的过程。 |
+-----------------------------------------------------------------------+

<div class="comment-reactions has-reactions js-reactions-container">

<div style="margin:0;padding:0;display:inline">

</div>

<div class="comment-reactions-options">

👍 2

</div>

</div>

</div>

</div>

</div>

<div class="timeline-comment-wrapper js-comment-container">

<div class="avatar-parent-child timeline-comment-avatar">

[![@zhouyu275596101](https://avatars0.githubusercontent.com/u/26214672?v=3&s=88){.avatar
.rounded-1 width="44" height="44"}](/zhouyu275596101)

</div>

<div id="issuecomment-300398329"
class="comment previewable-edit timeline-comment js-comment js-task-list-container"
data-body-version="90a9b1bd5ca5efb2c0e9218df8057201">

<div class="timeline-comment-header">

<div class="timeline-comment-actions">

</div>

### **[zhouyu275596101](/zhouyu275596101){.author}** commented [May 10, 2017](#issuecomment-300398329){.timestamp} {#zhouyu275596101-commented-may-10-2017 .timeline-comment-header-text .f5 .text-normal}

</div>

<div class="edit-comment-hide">

+-----------------------------------------------------------------------+
| 请问下学长为什么globalContext = {\                                    |
| VO: {\                                                                |
| data: \[...\],\                                                       |
| i: 3\                                                                 |
| }\                                                                    |
| }\                                                                    |
| 这里是3？？怎么来的 为什么不是0,1,2                                   |
+-----------------------------------------------------------------------+

<div class="comment-reactions js-reactions-container">

</div>

</div>

</div>

</div>

<div class="timeline-comment-wrapper js-comment-container">

<div class="avatar-parent-child timeline-comment-avatar">

[![@mqyqingfeng](https://avatars2.githubusercontent.com/u/11458263?v=3&s=88){.avatar
.rounded-1 width="44" height="44"}](/mqyqingfeng)

</div>

<div id="issuecomment-300399838"
class="comment previewable-edit timeline-comment js-comment js-task-list-container"
data-body-version="f8182634d2cacefd47fd51821acd2347">

<div class="timeline-comment-header">

<div class="timeline-comment-actions">

</div>

[ Owner ]{.timeline-comment-label .text-bold .tooltipped
.tooltipped-multiline .tooltipped-s
aria-label="This user is the owner of the Blog repository."}
### **[mqyqingfeng](/mqyqingfeng){.author}** commented [May 10, 2017](#issuecomment-300399838){.timestamp} {#mqyqingfeng-commented-may-10-2017 .timeline-comment-header-text .f5 .text-normal}

</div>

<div class="edit-comment-hide">

+-----------------------------------------------------------------------+
| 当执行到data\[0\]函数的时候，for循环已经执行完了，i是全局变量，此时的值为3，举个例子： |
|                                                                       |
|                                                                       |
| <div class="highlight highlight-source-js">                           |
|                                                                       |
|     for (var i = 0; i < 3; i++) {}                                    |
|     console.log(i) // 3                                               |
|                                                                       |
| </div>                                                                |
+-----------------------------------------------------------------------+

<div class="comment-reactions js-reactions-container">

</div>

</div>

</div>

</div>

<div class="timeline-comment-wrapper js-comment-container">

<div class="avatar-parent-child timeline-comment-avatar">

[![@spicychocolate](https://avatars1.githubusercontent.com/u/22002601?v=3&s=88){.avatar
.rounded-1 width="44" height="44"}](/spicychocolate)

</div>

<div id="issuecomment-301011409"
class="comment previewable-edit timeline-comment js-comment js-task-list-container"
data-body-version="fd1a0987c1063bba3d0bfff6a4719a54">

<div class="timeline-comment-header">

<div class="timeline-comment-actions">

</div>

### **[spicychocolate](/spicychocolate){.author}** commented [May 12, 2017](#issuecomment-301011409){.timestamp} {#spicychocolate-commented-may-12-2017 .timeline-comment-header-text .f5 .text-normal}

</div>

<div class="edit-comment-hide">

+-----------------------------------------------------------------------+
| 循环结束后                                                            |
|                                                                       |
|     data[0] = function(){console.log(i)}                              |
|     data[1] = function(){console.log(i)}                              |
|     data[2] = function(){console.log(i)}                              |
|                                                                       |
| 执行`data[0]()`，`data[1]()`，`data[2]()`时，`i=3`,所以都打印`3`\     |
| 这个例子看完N遍后终于知道原理了                                       |
+-----------------------------------------------------------------------+

<div class="comment-reactions js-reactions-container">

</div>

</div>

</div>

</div>

<div class="timeline-comment-wrapper js-comment-container">

<div class="avatar-parent-child timeline-comment-avatar">

[![@fi3ework](https://avatars2.githubusercontent.com/u/12322740?v=3&s=88){.avatar
.rounded-1 width="44" height="44"}](/fi3ework)

</div>

<div id="issuecomment-303015613"
class="comment previewable-edit timeline-comment js-comment js-task-list-container"
data-body-version="8e674d47dadfe7676b87c04a5b20b728">

<div class="timeline-comment-header">

<div class="timeline-comment-actions">

</div>

### **[fi3ework](/fi3ework){.author}** commented [May 22, 2017](#issuecomment-303015613){.timestamp} {#fi3ework-commented-may-22-2017 .timeline-comment-header-text .f5 .text-normal}

</div>

<div class="edit-comment-hide">

+-----------------------------------------------------------------------+
|     匿名函数Context = {                                               |
|         AO: {                                                         |
|             arguments: {                                              |
|                 0: 1,                                                 |
|                 length: 1                                             |
|             },                                                        |
|             i: 0                                                      |
|         }                                                             |
|     }                                                                 |
|                                                                       |
| 里面的`arguments`的`0:1`为什么是1呢，按我的理解应该和`i`的值相同，所以不是`0: 0`吗 |
+-----------------------------------------------------------------------+

<div class="comment-reactions js-reactions-container">

</div>

</div>

</div>

</div>

<div class="timeline-comment-wrapper js-comment-container">

<div class="avatar-parent-child timeline-comment-avatar">

[![@mqyqingfeng](https://avatars2.githubusercontent.com/u/11458263?v=3&s=88){.avatar
.rounded-1 width="44" height="44"}](/mqyqingfeng)

</div>

<div id="issuecomment-303018125"
class="comment previewable-edit timeline-comment js-comment js-task-list-container"
data-body-version="1d34a8bed68847a5cfa3621076de2390">

<div class="timeline-comment-header">

<div class="timeline-comment-actions">

</div>

[ Owner ]{.timeline-comment-label .text-bold .tooltipped
.tooltipped-multiline .tooltipped-s
aria-label="This user is the owner of the Blog repository."}
### **[mqyqingfeng](/mqyqingfeng){.author}** commented [May 22, 2017](#issuecomment-303018125){.timestamp} {#mqyqingfeng-commented-may-22-2017 .timeline-comment-header-text .f5 .text-normal}

</div>

<div class="edit-comment-hide">

+-----------------------------------------------------------------------+
| [@fi3ework](https://github.com/fi3ework){.user-mention}               |
| 嗯，这里是笔误，感谢指出，o(￣▽￣)ｄ                                    |
+-----------------------------------------------------------------------+

<div class="comment-reactions js-reactions-container">

</div>

</div>

</div>

</div>

<div id="partial-timeline-marker"
class="js-timeline-marker js-socket-channel js-updatable-content"
data-channel="issue:224652149"
data-url="/mqyqingfeng/Blog/issues/9/show_partial?partial=issues%2Ftimeline_marker&amp;since=1495437308"
data-last-modified="Mon, 22 May 2017 07:15:08 GMT">

<div style="margin:0;padding:0;display:inline">

</div>

</div>

</div>

<div class="discussion-timeline-actions">

<div class="flash flash-warn mt-3">

[Sign up for free](/join?source=comment-repo){.btn .btn-primary} **to
join this conversation on GitHub**. Already have an account? [Sign in to
comment](/login?return_to=https%3A%2F%2Fgithub.com%2Fmqyqingfeng%2FBlog%2Fissues%2F9)

</div>

</div>

</div>

</div>

<div class="clear">

</div>

</div>

</div>

</div>

<div class="modal-backdrop js-touch-events">

</div>

</div>

</div>

</div>

</div>

<div class="container site-footer-container">

<div class="site-footer" role="contentinfo">

-   [Contact GitHub](https://github.com/contact)
-   [API](https://developer.github.com)
-   [Training](https://training.github.com)
-   [Shop](https://shop.github.com)
-   [Blog](https://github.com/blog)
-   [About](https://github.com/about)

<!-- -->

-   © 2017
    [GitHub]{title="0.24595s from github-fe-a93be76.cp1-iad.github.net"},
    Inc.
-   [Terms](https://github.com/site/terms)
-   [Privacy](https://github.com/site/privacy)
-   [Security](https://github.com/security)
-   [Status](https://status.github.com/)
-   [Help](https://help.github.com)

</div>

</div>

<div id="ajax-error-message"
class="ajax-error-message flash flash-error">

You can't perform that action at this time.

</div>

<div
class="js-stale-session-flash stale-session-flash flash flash-warn flash-banner d-none">

[You signed in with another tab or window. [Reload]() to refresh your
session.]{.signed-in-tab-flash} [You signed out in another tab or
window. [Reload]() to refresh your session.]{.signed-out-tab-flash}

</div>

<div id="facebox" class="facebox" style="display:none;">

<div class="facebox-popup">

<div class="facebox-content" role="dialog"
aria-labelledby="facebox-header" aria-describedby="facebox-description">

</div>

</div>

</div>
