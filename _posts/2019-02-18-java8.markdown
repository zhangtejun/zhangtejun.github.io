---
layout: post
title:  "java8"
date:   2018-02-18 10:53:02
author: zhangtejun
categories: java
---
##### Java 8
*  Stream API
*  向方法传递代码的技巧
*  接口中的默认方法
Java 8是在2014年3月发布,Java 8提供了一个新的API（称为“流”，Stream），它支持许多处理数据的并行操作，其思路
和在数据库查询语言中的思路类似——用更高级的方式表达想要的东西，而由“实现”（在这里是Streams库）来选择最佳
低级执行机制。这样就可以避免用synchronized编写代码，这一代码不仅容易出错，而且在多核CPU上执行所需的成本也比你想象的要高。

##### 默认方法
Java 8中加入默认方法主要是为了支持库设计师，让他们能够写出更容易改进的接口。给接口设计者提供了一个扩充接口的方式，而不会破坏现有的代码。Java 8在接口声明
中使用新的default关键字来表示这一点。


##### Comparator与Comparable用法与区别
* Comparable  
1. 实现Comparable，重写compareTo方法。
```java
@Data
public class Apple implements Comparable<Apple>{
    private String color;
    private int weigth;

    Apple(String color, int weigth){
        this.color= color;
        this.weigth = weigth;
    }
    public static boolean isGreenApple(Apple apple) {
        return "green".equals(apple.getColor());
    }
    public static boolean isHeavyApple(Apple apple) {
        return apple.getWeigth() > 150;
    }

    @Override
    public int compareTo(Apple o) {
        return this.getColor().compareTo(o.getColor());
    }
}
/**
* // inventory  List<Apple>
* Collections.sort(inventory); // inventory.sort(Apple::compareTo); // jdk 1.8
* inventory.forEach(System.out::println);
**/
```
也就是说同一个类的对象之间如果要进行比较，需要实现Comparable接口，并且实现compareTo方法。比较的时候就会按照这个规则来进行比较。

* Comparator  
1. 实现Comparator，重写compare方法。
```java
class ComparatorTest implements Comparator<Banana> {

    @Override
    public int compare(Banana o1, Banana o2) {
        return o1.getColor().compareTo(o2.getColor());
    }
}


List<Banana> list = Arrays.asList(new Banana("G",12),new Banana("R",123),new Banana("G",20));
Collections.sort(list,new ComparatorTest());// list.sort(new ComparatorTest());
// Collections.sort(list,new ComparatorTest2()); // 另一个比较规则
list.forEach(System.out::println);
```
在不修改原实体类的情况下，可以通过实现多个Comparator来实现多个比较规则。通过Comparator，我们可以自定义比较规则，
针对对象的属性或者字段等来进行比较，而Comparable就实现不了，因为它的compareTo方法只能有一种比较规则。

* 使用匿名类来代替单独的实现类。将 `Collections.sort(list, new NameComparator());`：
```java
Collections.sort(list, new Comparator<Banana>() {
    @Override
    public int compare(Banana o1, Banana o2) {
        return o1.getColor().compareTo(o2.getColor());
    }
});
```
* 借助JDK1.8的lambda表达式：
```java
Collections.sort(list, (o1, o2) -> o1.getColor().compareTo(o2.getColor()));
```
* 借助JDK1.8中Comparator接口中的新的方法comparing
```java
Collections.sort(list, Comparator.comparing(Banana::getColor));
```

>reversed
>>返回逆序比较的比较器，底层直接使用Collections的reverseOrder来实现。
```java
default Comparator<T> reversed() {
    return Collections.reverseOrder(this);
}
```
>thenComparing 
>>多条件排序 ,该方法有多个重载
```java
inventory.sort(Comparator.comparing(Apple::getColor).thenComparing(Apple::getWeigth));
```
>naturalOrder
>>返回自然排序的比较器,reverseOrder恰好和naturalOrder相反。
```java
Collections.sort(list, Comparator.naturalOrder());
```
>nullsFirst和nullsLast方法
>>如果排序的字段为null的情况下这条记录怎么排序? nullsFirst是说将这条记录排在最前面，而nullsLast是说将这条记录排序在最后面。
>>如果多个key都为null的话，那将无法保证这几个对象的排序。
```java
// 按照color进行自然顺序排列，将key为null的排再最前面
Comparator<Banana> comparator = Comparator.comparing(Banana::getColor,Comparator.nullsFirst(Comparator.naturalOrder()));
list.sort(comparator);
```

##### 函数式接口
一言以蔽之，函数式接口就是只定义一个抽象方法的接口。接口现在还可以拥有默认方法（即在类没有对方法进行实现时，
其主体为方法提供默认实现的方法）。哪怕有很多默认方法，只要接口只定义了一个抽象方法，它就仍然是一个函数式接口。
>函数描述符
>>函数式接口的抽象方法的签名基本上就是Lambda表达式的签名。我们将这种抽象方法叫作
函数描述符。例如，Runnable接口可以看作一个什么也不接受什么也不返回（void）的函数的
签名，因为它只有一个叫作run的抽象方法，这个方法什么也不接受，什么也不返回（void）。

>使用局部变量
>>Lambda表达式也允许使用自由变量（不是参数，而是在外层作用域中定义的变量），就像匿名类一样。 它们被
称作捕获Lambda。
例如，下面的Lambda捕获了portNumber变量：
```java
    int portNumber = 1337;
    Runnable r = () -> System.out.println(portNumber);
```
>>Lambda可以没有限制地捕获（也就是在其主体中引用）实例变量和静态变量。但局部变量必须显式声明为final，
或事实上是final。换句话说，Lambda表达式只能捕获指派给它们的局部变量一次。（注：捕获
实例变量可以被看作捕获最终局部变量this。） 例如，下面的代码无法编译，因为portNumber
变量被赋值两次：
```java
    int portNumber = 1337;
    Runnable r = () -> System.out.println(portNumber);
    portNumber = 31337; 
```
>>对局部变量的限制,为什么局部变量有这些限制?
>>第一，实例变量和局部变量背后的实现有一个关键不同。实例变量都存储在堆中，而局部变量则保存在栈上。如果Lambda可以直接访问局
部变量，而且Lambda是在一个线程中使用的，则使用Lambda的线程，可能会在分配该变量的线
程将这个变量收回之后，去访问该变量。因此，Java在访问自由局部变量时，实际上是在访问它
的副本，而不是访问原始变量。如果局部变量仅仅赋值一次那就没有什么区别了——因此就有了
这个限制。  
第二，这一限制不鼓励你使用改变外部变量的典型命令式编程模式（我们会在以后的各章中
解释，这种模式会阻碍很容易做到的并行处理）。

##### 方法引用
方法引用让你可以重复使用现有的方法定义，并像Lambda一样传递它们。在一些情况下，比起使用Lambda表达式，它们似乎更易读，感觉也更自然。
```java
inventory.sort((Apple a1, Apple a2) -> a1.getWeight().compareTo(a2.getWeight())); 
//（使用方法引用和java.util.Comparator.comparing)
inventory.sort(Comparator.comparing(Apple::getWeight)); 
inventory.sort(Comparator.comparing(Apple::getColor).thenComparing(Apple::getWeigth));//比较器链
```
方法引用可以被看作仅仅调用特定方法的Lambda的一种快捷写法。它的基本思想是，如果一个Lambda代表的只是“直接调用这个方法”，那最好还是用名称
来调用它，而不是去描述如何调用它。事实上，方法引用就是让你根据已有的方法实现来创建Lambda表达式。但是，显式地指明方法的名称，你的代码的可
读性会更好。它是如何工作的呢？当你需要使用方法引用时，目标引用放在分隔符::前，方法的名称放在后面。例如，Apple::getWeight就是引用了Apple类
中定义的方法getWeight。请记住，不需要括号，因为你没有实际调用这个方法。方法引用就是Lambda表达式(Apple a) -> a.getWeight()的快捷写法。

| Lambda        | 等效的方法引用    |  
|  :----:   |  :----:  |
| (Apple a) -> a.getWeight()         | Apple::getWeight       |  
| () -> Thread.currentThread().dumpStack()         | Thread.currentThread()::dumpStack      |   
| (str, i) -> str.substring(i)        | String::substring      |   
| (String s) -> System.out.println(s)         | System.out::println     | 

###### 如何构建方法引用  
方法引用主要有三类
1.  指向静态方法的方法引用（例如Integer的parseInt方法，写作Integer::parseInt）
2.  指向任意类型实例方法 的方法引用（例如 String 的 length 方法，写作String::length）。
3.  指向现有对象的实例方法的方法引用（假设你有一个局部变量expensiveTransaction用于存放Transaction类型的对象，它支持实例方法getValue，
     那么你就可以写expensiveTransaction::getValue）。

###### 谓词复合
谓词接口包括三个方法：negate、and和or，让你可以重用已有的Predicate来创建更复杂的谓词。
`a.or(b).and(c)可以看作(a || b) && c`  
组合谓词，表达要么是重（150克以上）的红苹果，要么是绿苹果：
```java
Predicate<Apple> s = apple -> apple.getColor().equals("red");
        s.negate().and(apple -> apple.getWeigth()<100).or(
                apple -> apple.getWeigth()>10
        );
```
###### 函数复合
Function接口所代表的Lambda表达式复合起来。Function接口为此配了andThen和compose两个默认方法，它们都会返回Function的一个实例。
* andThen方法会返回一个函数，它先对输入应用一个给定函数，再对输出应用另一个函数。
假设有一个函数f给数字加1 (x -> x + 1)，另一个函数g给数字乘2，你可以将它们组合成一个函数h，先给数字加1，再给结果乘2
```java
Function<Integer, Integer> f = x -> x + 1;
Function<Integer, Integer> g = x -> x * 2;
Function<Integer, Integer> h = f.andThen(g);
int result = h.apply(1);//4  数学上一般会写作g(f(x))
```
* compose方法，先把给定的函数用作compose的参数里面给的那个函数，然后再把函数本身用于结果。用compose的话，它将意味着f(g(x))，而andThen则意味着g(f(x))：
```java
Function<Integer, Integer> f = x -> x + 1;
Function<Integer, Integer> g = x -> x * 2;
Function<Integer, Integer> h = f.compose(g);
int result = h.apply(1);// 3
```

###### 用谓词筛选
Streams接口支持filter方法。该操作会接受一个谓词（一个返回boolean的函数）作为参数，并返回一个包括所有符合谓词的元素的流。
```java
List<Dish> dishes = menu.parallelStream().filter(Dish::isVegetarian).collect(Collectors.toList());
```
###### 筛选各异的元素
作distinct的方法，它会返回一个元素各异（根据流所生成元素的hashCode和equals方法实现）的流。
```java
List<Integer> numbers = Arrays.asList(1, 2, 1, 3, 3, 2, 4);
numbers.stream().filter(i -> i % 2 != 0).distinct().forEach(System.out::println);
```
###### 截短流
流支持limit(n)方法，该方法会返回一个不超过给定长度的流。所需的长度作为参数传递给limit。如果流是有序的，则最多会返回前n个元素。

###### 跳过元素
流还支持skip(n)方法，返回一个扔掉了前n个元素的流。如果流中元素不足n个，则返回一个空流。请注意，limit(n)和skip(n)是互补的。

##### 映射
* 对流中每一个元素应用函数  
流支持map方法，它会接受一个函数作为参数。这个函数会被应用到每个元素上，并将其映射成一个新的元素（使用映射一词，是因为它和
转换类似，但其中的细微差别在于它是“创建一个新版本”而不是去“修改”）
```java
// 因为getName方法返回一个String，所以map方法输出的流的类型就是Stream<String>
List<String> dishNames = menu.stream().map(Dish::getName).collect(toList());

List<Integer> dishNameLengths = menu.stream().map(Dish::getName).map(String::length).collect(toList());
```
* 流的扁平化flatMap  
一言以蔽之，flatmap方法让你把一个流中的每个值都换成另一个流，然后把所有的流连接起来成为一个流。


##### Optional简介
Optional<T>类（java.util.Optional）是一个容器类，代表一个值存在或不存在。

###### 元素求和
reduce方法
```java
/** 
    reduce接受两个参数：
    一个初始值，这里是0；
    一个BinaryOperator<T>来将两个元素结合起来产生一个新值，这里我们用的是
    lambda (a, b) -> a + b。
**/
int sum = numbers.stream().reduce(0, (a, b) -> a + b);
```
在Java 8中，Integer类现在有了一个静态的sum方法来对两个数求和，这恰好是我们想要的，用不着反复用Lambda写同一段代码了：
`int sum = numbers.stream().reduce(0, Integer::sum);`
* 无初始值
reduce还有一个重载的变体，它不接受初始值，但是会返回一个Optional对象：
`Optional<Integer> sum = numbers.stream().reduce((a, b) -> (a + b));`
为什么它返回一个Optional<Integer>呢？考虑流中没有任何元素的情况。reduce操作无法返回其和，因为它没有初始值。
这就是为什么结果被包裹在一个Optional对象里，以表明和可能不存在。

###### 原始类型流特化
Java 8引入了三个原始类型特化流接口来解决这个问题：IntStream、DoubleStream和
LongStream，分别将流中的元素特化为int、long和double，从而避免了暗含的装箱成本。
1. 映射到数值流
将流转换为特化版本的常用方法是mapToInt、mapToDouble和mapToLong。这些方法和前面说的map方法的工作方式一样，只是它们返回的是一个特化流，而不是Stream<T>。
```java
int calories = menu.stream() //返回一个 Stream<Dish>
    .mapToInt(Dish::getCalories)//返回一个 IntStream
    .sum();
```
这里，mapToInt会从每道菜中提取热量（用一个Integer表示），并返回一个IntStream（而不是一个Stream<Integer>）,。IntStream还支持其他的方便方法，如max、min、average等。
2. 转换回对象流
同样，一旦有了数值流，你可能会想把它转换回非特化流。例如，IntStream上的操作只能产生原始整数： IntStream 的map 操作接受的Lambda 必须接受int 并返回int （ 一个
IntUnaryOperator）。但是你可能想要生成另一类值，比如Dish。为此，你需要访问Stream接口中定义的那些更广义的操作。要把原始流转换成一般流（每个int都会装箱成一个
Integer），可以使用boxed方法，如下所示
```java
IntStream intStream = menu.stream().mapToInt(Dish::getCalories);//将Stream 转换为数值流
Stream<Integer> stream = intStream.boxed();//将数值流转换为Stream
```
3. 默认值OptionalInt
求和的那个例子很容易，因为它有一个默认值：0。但是，如果你要计算IntStream中的最大元素，就得换个法子了，因为0是错误的结果。如何区分没有元素的流和最大值真的是0的流呢？
前面我们介绍了Optional类，这是一个可以表示值存在或不存在的容器。Optional可以用Integer、String等参考类型来参数化。对于三种原始流特化，也分别有一个Optional原始类
型特化版本：OptionalInt、OptionalDouble和OptionalLong。  
例如，要找到IntStream中的最大元素，可以调用max方法，它会返回一个OptionalInt：
```java
OptionalInt maxCalories = menu.stream().mapToInt(Dish::getCalories).max();
// 现在，如果没有最大值的话，你就可以显式处理OptionalInt去定义一个默认值了：
int max = maxCalories.orElse(1);
```
##### 构建流
###### 由值创建流
可以使用静态方法Stream.of，通过显式值创建一个流。它可以接受任意数量的参数。
```java
Stream.of("java1.8","123asd","abc").map(String::toLowerCase).forEach(System.err::println);
// 可以使用empty得到一个空流
Stream<String> emptyStream = Stream.empty();
```
###### 由数组创建流
可以使用静态方法Arrays.stream从数组创建一个流。它接受一个数组作为参数。
```java
int[] numbers = {2, 3, 5, 7, 11, 13};
int sum = Arrays.stream(numbers).sum();// 求和
```
###### 由文件生成流
Java中用于处理文件等I/O操作的NIO API（非阻塞 I/O）已更新，以便利用Stream API。java.nio.file.Files中的很多静态方法都会返回一个流。
```java
long uniqueWords = 0;
try (Stream<String> lines = Files.lines(Paths.get("C:\\Users\\Administrator\\Desktop\\aa"), Charset.defaultCharset())){
    uniqueWords = lines.flatMap(line -> Arrays.stream(line.split(" "))).count();
}
```
你可以使用Files.lines得到一个流，其中的每个元素都是给定文件中的一行。然后，你可以对line调用split方法将行拆分成单词。使用flatMap产生一个扁
平的单词流，而不是给每一行生成一个单词流。
###### 由函数生成流：创建无限流
Stream API提供了两个静态方法来从函数生成流：Stream.iterate和Stream.generate。这两个操作可以创建所谓的无限流：不像从固定集合创建的流那样有固定大小的流。由iterate
和generate产生的流会用给定的函数按需创建值，因此可以无穷无尽地计算下去，应该使用limit(n)来对这种流加以限制。

1. 迭代
```java
 Stream.iterate(0,n -> n+1).limit(3).forEach(System.err::println);
```
2. 生成
与iterate方法类似，generate方法也可让你按需生成一个无限流。但generate不是依次对每个新生成的值应用函数的。它接受一个Supplier<T>类型的Lambda提供新的值。
```java
Stream.generate(Math::random).limit(5).forEach(System.out::println);

IntSupplier fib = new IntSupplier(){
    private int previous = 0;
    private int current = 1;
    public int getAsInt(){
        int oldPrevious = this.previous;
        int nextValue = this.previous + this.current;
        this.previous = this.current;
        this.current = nextValue;
        return oldPrevious;
    }
};
IntStream.generate(fib).limit(10).forEach(System.out::println);
```
前面的代码创建了一个IntSupplier的实例。此对象有可变的状态：它在两个实例变量中
记录了前一个斐波纳契项和当前的斐波纳契项(0, 1, 1,2, 3, 5, 8, 13, 21, 34, 55…数列中开始的两个数字是0和1，)。getAsInt在调用时会改变对象的状态，由此在
每次调用时产生新的值。相比之下，使用iterate的方法则是纯粹不变的：它没有修改现有状态，但在每次迭代时会创建新的元组。你将在第7章了解到，你应该始终采用不变的方法，以便并行
处理流，并保持结果正确。请注意，因为你处理的是一个无限流，所以必须使用limit操作来显式限制它的大小；否则，终端操作（这里是forEach）将永远计算下去。同样，你不能对无限流
做排序或归约，因为所有元素都需要处理，而这永远也完不成！

##### 用流收集数据
>归约和汇总
>>利用counting工厂方法返回的收集器,求总数。
>>>`long howManyDishes = menu.stream().collect(Collectors.counting());// long howManyDishes = menu.stream().count();`     
>>
>>查找流中的最大值和最小值
>>>使用两个收集器，Collectors.maxBy和Collectors.minBy，来计算流中的最大或最小值。这两个收集器接收一个Comparator参数来比较流中的元素
>>> ```java
>>> Comparator<Dish> dishCaloriesComparator = Comparator.comparingInt(Dish::getCalories);
>>> Optional<Dish> mostCalorieDish = menu.stream().collect(maxBy(dishCaloriesComparator));
>>>```
>>>Optional<Dish>它是一个容器，可以包含也可以不包含值,解决“要是menu为空怎么办”，那就没有要返回了。
>>
>>汇总
>>>Collectors类专门为汇总提供了一个工厂方法：Collectors.summingInt。它可接受一个把对象映射为求和所需int的函数，并返回一个收集器；该收集器在传递给普通的collect方
>>>法后即执行我们需要的汇总操作。
>>>```java 
>>>int totalCalories = menu.stream().collect(summingInt(Dish::getCalories));
>>>```
>>>可以使用summarizingInt工厂方法返回的收集器。例如，通过一次summarizing操作你可以就数出菜单中元素的个数，并得 到菜肴热量总和、平均值、最大值和最小值：
>>
>>连接字符串
>>>joining工厂方法返回的收集器会把对流中每一个对象应用toString方法得到的所有字符串连接成一个字符串。
>>>joining工厂方法有一个重载版本可以接受元素间分割符。`String shortMenu = menu.stream().map(Dish::getName).collect(joining(", "));`

以上的收集器，都是一个可以用 reducing 工厂方法定义的归约过程的特殊情况而已。 Collectors.reducing 工厂方法是所有这些特殊情况的一般化
用 reducing 方法创建的收集器来计算你菜单的总热量，如下所示：
```java
int totalCalories = menu.stream().collect(reducing(0, Dish::getCalories, (i, j) -> i + j));
```

使用下面这样单参数形式的 reducing 来找到热量最高的菜:
```java
Optional<Dish> mostCalorieDish = menu.stream().collect(reducing((d1, d2) -> d1.getCalories() > d2.getCalories() ? d1 : d2));
```
收集器就没有起点，它将因此而返回一个 Optional<Dish> 对象。

要数一数菜单中每类菜有多少个，可以传递 counting 收集器作为groupingBy 收集器的第二个参数：
```java
Map<Dish.Type, Long> typesCount = menu.stream().collect(groupingBy(Dish::getType, counting()));// {MEAT=3, FISH=2, OTHER=4}
```

##### 并行数据处理与性能
假设你需要写一个方法，接受数字n作为参数，并返回从1到给定参数的所有数字的和。一个直接（也许有点土）的方法是生成一个无穷大的数字流，把它限制到给定的数目，然后用对两个
数字求和的 BinaryOperator 来归约这个流。
```java
public static long sequentialSum(long n) {
    return Stream.iterate(1L, i -> i + 1) // 生成无限流
        .limit(n) // 限制到前n个数
        .reduce(0L, Long::sum); //对所有数字求和来归纳流
}
//将顺序流转换为并行流
public static long parallelSum(long n) {
    return Stream.iterate(1L, i -> i + 1)
        .limit(n)
        .parallel() //转为并行流
        .reduce(0L, Long::sum);
}
```





